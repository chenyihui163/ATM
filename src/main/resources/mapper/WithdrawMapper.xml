<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.atm.dao.WithdrawMapper">
	<resultMap id="BaseResultMap" type="com.atm.entity.Withdraw">
		<id column="Id" property="id" jdbcType="INTEGER" />
		<result column="aId" property="aid" jdbcType="INTEGER" />
		<result column="take_Money" property="takeMoney" jdbcType="INTEGER" />
		<result column="take_Time" property="takeTime" jdbcType="TIMESTAMP" />
		<result column="money" property="money" jdbcType="INTEGER" />
		<result column="state" property="state" jdbcType="INTEGER" />
		<association property="account" javaType="com.atm.entity.Account">
			<id column="aId" property="aid" jdbcType="INTEGER" />
			<result column="Money" property="money" jdbcType="DOUBLE" />
			<result column="State" property="state" jdbcType="INTEGER" />
			<result column="Credit_level" property="creditLevel" jdbcType="INTEGER" />
			<result column="Integral" property="integral" jdbcType="INTEGER" />
		</association>
	</resultMap>

	<sql id="Base_Column_List">
		Id, aId, take_Money, take_Time, money, state
	</sql>
	
	<select id ="queryTop" resultMap ="BaseResultMap" parameterType ="Integer" >
	select *
	from withdraw 
	where aid =#{aid}
	order by take_Time desc
	limit 0,5
	
	</select>

	<select id="selectAccountByWithdraw" resultMap="BaseResultMap"
		parameterType="Map">
		select *
		from withdraw w
		left outer join account a on a.aId =w.aId
		<where>
			<if test="aid !=null and  aid.trim()!='' ">
				and w.aid =#{aid}
			</if>
			<if test="state !=null and  state.trim()!='' ">
				and state =#{state}
			</if>


		</where>
		<choose>
			<when test="sidx != null and sidx.trim() != ''">
				order by ${sidx} ${order}
			</when>
			<otherwise>
				order by Id desc
			</otherwise>
		</choose>
		<if test="offset !=null and limit !=null">
			limit #{offset},#{limit}
		</if>
	</select>

	<select id="queryTotal" resultType="java.lang.Integer"
		parameterType="Map">
		select count(*) from withdraw
		<where>
			<if test="aid !=null and  aid.trim()!='' ">
				and aid =#{aid}
			</if>
			<if test="state !=null and  state.trim()!='' ">
				and state =#{state}
			</if>
		</where>
	</select>

	<select id="selectByPrimaryKey" resultType="com.atm.entity.Withdraw"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from withdraw
		where Id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		withdraw
		where Id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.atm.entity.Withdraw"
		useGeneratedKeys="true" keyProperty="Id">
		insert into withdraw (aId,
		take_Money,
		take_Time, money, state
		)
		values ( #{aid,jdbcType=INTEGER},
		#{takeMoney,jdbcType=INTEGER},
		#{takeTime,jdbcType=TIMESTAMP},
		#{money,jdbcType=INTEGER},
		#{state,jdbcType=INTEGER}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.atm.entity.Withdraw" useGeneratedKeys="true" keyProperty="Id">
		insert into withdraw
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				Id,
			</if>
			<if test="aid != null">
				aId,
			</if>
			<if test="takeMoney != null">
				take_Money,
			</if>
			<if test="takeTime != null">
				take_Time,
			</if>
			<if test="money != null">
				money,
			</if>
			<if test="state != null">
				state,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="aid != null">
				#{aid,jdbcType=INTEGER},
			</if>
			<if test="takeMoney != null">
				#{takeMoney,jdbcType=INTEGER},
			</if>
			<if test="takeTime != null">
				#{takeTime,jdbcType=TIMESTAMP},
			</if>
			<if test="money != null">
				#{money,jdbcType=INTEGER},
			</if>
			<if test="state != null">
				1
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.atm.entity.Withdraw">
		update withdraw
		<set>
			<if test="aid != null">
				aId = #{aid,jdbcType=INTEGER},
			</if>
			<if test="takeMoney != null">
				take_Money = #{takeMoney,jdbcType=INTEGER},
			</if>
			<if test="takeTime != null">
				take_Time = #{takeTime,jdbcType=TIMESTAMP},
			</if>
			<if test="money != null">
				money = #{money,jdbcType=INTEGER},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=INTEGER},
			</if>
		</set>
		where Id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.atm.entity.Withdraw">
		update withdraw
		set aId = #{aid,jdbcType=INTEGER},
		take_Money =
		#{takeMoney,jdbcType=INTEGER},
		take_Time =
		#{takeTime,jdbcType=TIMESTAMP},
		money = #{money,jdbcType=INTEGER},
		state = #{state,jdbcType=INTEGER}
		where Id = #{id,jdbcType=INTEGER}
	</update>
</mapper>